"""
!!! WARNING !!!
This module is in "test" mode. It doesn't work, as there is no Production-ready SMTP service we can use for now!
So far, for the "test" mode, in order to present the functionality of our service, we use credentials
of the manually created gmail account, which requires generating a valid token by opening a browser,
and this is obviously not the way things should work in production

More information on how you can set up a test account: https://developers.google.com/gmail/api/quickstart/python
"""

import base64
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

from email.message import EmailMessage

SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/gmail.compose'
]

TEST_EMAIL_FROM = os.getenv("TEST_EMAIL_FROM")
TEST_EMAIL_TO = os.getenv("TEST_EMAIL_TO", TEST_EMAIL_FROM)

creds = None
credentials_filename = os.path.join(os.path.dirname(__file__), "credentials.json")
token_filename = os.path.join(os.path.dirname(__file__), "token.json")


def obtain_token_info():
    # From here: https://developers.google.com/gmail/api/quickstart/python
    global creds
    if os.path.exists(token_filename):
        creds = Credentials.from_authorized_user_file(token_filename, SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(credentials_filename, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_filename, 'w') as token:
            token.write(creds.to_json())


def get_labels():
    global creds
    service = build('gmail', 'v1', credentials=creds)
    results = service.users().labels().list(userId='me').execute()
    labels = results.get('labels', [])

    if not labels:
        print('No labels found.')
        return
    print('Labels:')
    for label in labels:
        print(label['name'])


def send_message(message: EmailMessage):
    service = build('gmail', 'v1', credentials=creds)
    encoded_message = base64.urlsafe_b64encode(message.as_bytes()) \
        .decode()

    create_message = {
        'raw': encoded_message
    }
    print(service.users().messages().send(userId="me", body=create_message).execute())


def generate_test_message(from_: str, to: str) -> EmailMessage:
    message = EmailMessage()

    message.set_content("This is a test message generated by the Share App Bot")

    message["To"] = to
    message["From"] = f"Share!<{from_}>"
    message["Subject"] = "Test Message from Share App Bot"

    return message
